

package week03

object rationals {
  val x = new Rational(1, 3)                      //> x  : week02.Rational = 1/3
  x.numer                                         //> res0: Int = 1
  x.denom                                         //> res1: Int = 3

  val y = new Rational(5, 7)                      //> y  : week02.Rational = 5/7
  val z = new Rational(3, 2)                      //> z  : week02.Rational = 3/2

  x - y - z                                       //> res2: week02.Rational = -79/42
  y + y                                           //> res3: week02.Rational = 10/7
  x - y                                           //> res4: week02.Rational = 8/-21
  x.max(y)                                        //> res5: week02.Rational = 5/7
  new Rational(3)                                 //> res6: week02.Rational = 3/1
}

class Rational(x: Int, y: Int) {
	// require is used to check for pre-conditions
	require(y != 0, "Denominator cannot be zero")
	
	// when "this" is used as function identifier, it means its a constructor(ctor)
	// here, this additional ctor calls the default ctor
	def this(x: Int) = this(x, 1)
	
  private def gcd(a: Int, b: Int): Int = { if (b == 0) a else gcd(b, a % b) }
  
  def numer = x
  def denom = y

  def < (that: Rational) =
    numer * that.denom < that.numer * denom

  def max(that: Rational) =
    if (this < that) that else this

  def + (that: Rational) =
    new Rational(
      numer * that.denom + that.numer * denom,
      denom * that.denom)

  def - (that: Rational) = this + -that

  def unary_- () = new Rational(-numer, denom)

  override def toString = {
   val g = gcd(x, y)
   numer / g + "/" + denom / g
   }
}